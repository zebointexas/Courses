
/*
#define NUMBER_OF_US_CITIES		115
#define NUMBER_OF_US_STATES		50
#define NUMBER_OF_US_REGIONS	17
*/

#include "ematch.h"
#include "my_string_class.h"
/*#include "ematch_const_struct.h"*/


class ematch_class {

public: 

	mystring cgi_string;

	mystring * cgi_string_pairs;

	mystring * name;			// To hold name field of name=value pair
	mystring * value;			// To hold value field of name=value pair.
	mystring * value_type;			// To hold type of value: 0, a number; 
						//   1, a varchar or a date type
						//    The value will be converted to all lowcase
	mystring * unchanged_value;		// To hold the orignal value field of
						//		name=value field (case not converted)
	mystring   keyword_string;

	int keyword_number;

	int pair_number;			// Number of name=value pairs in the first command
								// line argument

	int ematch_or_insert;			// 0: Ematch; 1: Insert.
	int search_type;			// 1, 2: job search; 3, 4: member search
	int my_search_type;			// For convenience, 1: job search; 2: member search

	int total_selected_rows;		// Total rows returned by the select query
	int total_matched_rows;			// Total rows actually matched and returned
	mystring ** result_array;
	int ** result_array_ind;
	int * selected_or_not;	// 1: the corresponding element is
						//	selected for final output;
						// 0: not selected

	int location_search_type;			// 0: none; 1: by country;
							// 2: by region;
							// 3: by state;
							// 4: by city
	int do_not_set_search_by_c_r_s_or_city;

	// Arraying holding the original sequence info of tuples, stored in result_array,
 	// generated by the initial SQL query statement. They then have to go through
	// rating process, and sorting process. For efficiency consideration, sorting is
	// done in place -- only the ratings array is rearranged, the order of elements
	// of result_array is unchanged. The array original_index keeps the index of the
	// final sorted order. That is, if original_index[i] == k, then the ith output
	// tuple is in the kth position of result_array.
	int * original_index; 

	int country_code;
	int table_index;			// Index of the table being processed.
						// 1: member; 2: employer; 3: job

	int asked_city_index, asked_state_index, asked_region_index, asked_location_index;
	mystring  asked_city,	asked_state,   asked_region, asked_location_name;

	int asked_degree;
	int asked_min_salary;
	int asked_max_salary;
	int asked_year_of_exp;

	int *output_width;
	int *ratings;				// Array holding rating info of each matched row

	int column_number;			// Should be set to const COLUMN_NUMBER_IN_JOB_TABLE
								// It should be 15 currently
	int max_matching_number;		// Should be set to const MAX_MATCH_NUMBER
	int * column_listed;			// Column names listed in CGI string 
	int * name_index;			// If name_index[i] = j, then the ith
								//   column in the JOB table is the jth
								//   name in the query.
	int * name_to_column_index;             // Complementing name_index

	int salary_required;		// Salary field required in tuples returned from query
	int year_of_exp_required;
	int degree_required;

	int neighbor_city_beginning_index[NUMBER_OF_US_CITIES];
	int neighbor_state_beginning_index[NUMBER_OF_US_STATES];
	int us_city_in_state_beginning_index[NUMBER_OF_US_STATES];
	int us_state_in_region_beginning_index[NUMBER_OF_US_REGIONS];

	ematch_class(void);

	ematch_class (int);			// Parameter: ematch_or_insert


	// constants and data structures for job search
	int job_type_required;
	mystring asked_job_type;

	int job_title_required;
	mystring asked_job_title;

	int specialization_required;
	mystring asked_specialization;

	int country_code_required;
	int asked_country_code;

	int region_name_required;
	mystring asked_region_name;

	int state_name_required;
	mystring asked_state_name;

	int city_name_required;
	mystring asked_city_name;

	int min_salary_required;

	int max_salary_required;

	int company_name_required;
	mystring asked_company_name;

	int start_date_required;
	mystring asked_start_date;
	// end of constants and data structures for job search
	
	int max(int, int);
	int min(int, int);

	// methods for job search 
	void set_initial_job_environ (int, int, int);
	void set_more_job_environ(ostream &, int);
	int  validate_job_table_column_names(void);
	void separate_each_job_pair (ostream &);
	//void convert_a_job_table_column_name(mystring);

	int find_job_table_column_index(mystring);
	// end of methods for job search 

	//
	// 1st parameter: table_index; 
	// 2nd parameter: search type (1,2: job search; 3, 4: member search);
	// 3rd parameter: country_code
	void set_initial_environ (int, int, int);
	void set_initial_insert_environ (int);

	
	// methods handling input cgi strings
	void find_pair_number (ostream &, mystring);
	void extract_cgi_pairs(ostream &, mystring);
	void separate_each_pair (ostream &);
	void convert_a_job_table_column_name (mystring);
	int validate_table_column_names (void);
	void convert_a_single_quote_and_percent_sign (mystring);

	// methods handling matched rows
	void set_num_of_rows(int);

	void set_output_width(int, int);
	void set_more_ematch_environ(ostream &, int);


	void initialize_result_array (void);

	int compute_a_job_rating(mystring *, int *, ostream &);
	int compute_member_rating_for_a_row(ostream &, mystring *, int *);

	void insert_a_matched_row(ostream &, mystring *, int *, int);
	void insert_a_column_to_result_array(mystring, int, int, int);

	void sort_result_rows(ostream &);

	//void print_result_rows(ostream &);
	void print_result_rows(ostream &);
	void print_neighbor_cities (ostream &);
	void print_neighbor_states (ostream &);
	void print_cities_in_states (ostream &);
	void print_states_in_regions (ostream &);
	int find_column_index(mystring);
	void get_table_name(mystring);

	int compute_location_rating(ostream &, mystring *, int *);
private:

	int find_region_index(mystring);
	int find_state_index(mystring);
	int find_city_index(mystring);

	int compute_region_rating(mystring *, int *, ostream &);
	int compute_state_rating(int, mystring *, int *, ostream &);
	int compute_city_rating(int, mystring *, int *, ostream &);

	int compute_sal_rating(int);

	int check_if_state_in_region (int, int, ostream &);
	int check_if_city_in_region (int, int, ostream &);
	int check_if_city_in_state (int, int, ostream &);

	int the_city_is_in_the_state(int, int, ostream &);
	int the_state_is_in_the_region(int, int, ostream &);

	int find_degree_index(mystring);
};
	

